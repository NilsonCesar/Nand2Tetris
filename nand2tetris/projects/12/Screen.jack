// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static int color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = 1;
        } else {
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, remainder;
        var boolean in;
        let address = Math.multiply(y, 32) + Math.divide(x, 16);
        let value = screen[address];
        let remainder = x - (Math.divide(x, 16) * 16);
        let in = Math.bit(value, remainder);
        do Screen.setColor(~in);
        if (color = 0) {
            let value = value - Math.getPower(remainder);
        }
        if (color = 1) {
            let value = value + Math.getPower(remainder);
        }
        let screen[address] = value;
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, tmp;
        var boolean doIt;
        let doIt = false;
        let a = 0;
        let b = 0;
        let diff = 0;

        if((x1 = x2) & ~doIt) {
            let tmp = Math.min(y1, y2);
            let y2 = Math.max(y1, y2);
            let y1 = tmp;

            while(((b + y1) < y2) | ((b + y1) = y2)) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b + 1;
            }
            let doIt = true;
        }

        if((y1 = y2) & ~doIt) {
            let tmp = Math.min(x1, x2);
            let x2 = Math.max(x1, x2);
            let x1 = tmp;
            
            while(((a + x1) < x2) | ((a + x1) = x2)) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
            let doIt = true;
        }

        if((x2 < x1) & (y2 < y1)) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        if(((x1 < x2) & (y1 < y2)) & ~doIt) {
            let dx = x2 - x1;
            let dy = y2 - y1;
            while(((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            let doIt = true;
        }

        if((x1 < x2) & (y2 < y1)) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 1;
        let b = -1;

        while((((a > dx) | (a = dx)) & ((b < dy) | (b = dy))) & ~doIt) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if(diff < 0) {
                let a = a - 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff + dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int j;
        let j = y1;
        while((j < y2) | (j = y2)) {
            do Screen.drawLine(x1, j, x2, j);
            let j = j + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        let r = Math.min(r, 181);
        let dy = -r;
        while(dy < r) {
            let dx = Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
