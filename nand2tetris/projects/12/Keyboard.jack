// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static Array keyboard;

    /** Initializes the keyboard. */
    function void init() {
        let keyboard = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var char op;
        let op = keyboard[0];
        
        if(op = 128) {
            return String.newLine();
        }
        if(op = 129) {
            return String.backSpace();
        } else {
            return op;
        }
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;
        while(Keyboard.keyPressed() = 0) {}
        let c = Keyboard.keyPressed();
        while(~(Keyboard.keyPressed() = 0)) {}
        if(c < 129) {
            do Output.printChar(c);
        }
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String str;
        var char c;
        let str = String.new(20);
        do Output.printString(message);

        while(true) {
            let c = Keyboard.readChar();
            if(c = String.newLine()) {
                do Output.println();
                return str;
            }

            if(~(c = String.backSpace())) {
                do str.appendChar(c);
            } else {
                do Output.backSpace();
                do str.eraseLastChar();
            }
        }

        return str;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var boolean negative;
        var String strInt;
        var char c;
        var int num, power, i, size, j, power10;
        let negative = false;
        let num = 0;
        let i = 0;
        let j = 0;
        let strInt = String.new(20);

        do Output.printString(message);
        while(true) {
            let c = Keyboard.readChar();
            if(c = String.newLine()) {
                let size = strInt.length();
                let power = size - 1;
                while(i < size) {
                    let j = 0;
                    let power10 = 1;
                    while(j < power) {
                        let power10 = Math.multiply(power10, 10);
                        let j = j + 1;
                    }
                    let num = num + ((strInt.charAt(i) - 48) * power10);
                    let power = power - 1;
                    let i = i + 1;
                }
                if(negative) {
                    let num = -num;
                }
                return num;
            }

            if(~(c = String.backSpace())) {
                if(c = 45) {
                    let negative = true;
                } else {
                    do strInt.appendChar(c);
                }
            } else {
                do Output.backSpace();
                do strInt.eraseLastChar();
            }
        }

        return num;
    }
}
