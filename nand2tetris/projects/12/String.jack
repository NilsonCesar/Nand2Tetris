// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if(maxLength = 0) {
            let maxLength = 1;
            let length = 1;
        }
        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        let length = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int power, i, power10, result, n;
        var boolean negative;
        let negative = false;
        let n = length();
        let i = 0;
        let result = 0;
        if(str[0] = 45) {
            let negative = true;
            let i = 1;
        }

        while(i < n) {
            let power = n - i - 1;
            let power10 = 1;
            while(power > 0) {
                let power10 = Math.multiply(power10, 10);
                let power = power - 1;
            }
            let result = result + ((str[i] - 48) * power10);
            let i = i + 1;
        }
        if(negative) {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, intDivision, c;
        if (val < 0) {
            let val = -val;
            let length = 0;
            do appendChar(45);
        }
        let intDivision = Math.divide(val, 10);
        let lastDigit = 48 + val - Math.multiply(10, intDivision);
        let c = lastDigit;
        if(val < 10) {
            do appendChar(c);
        } else {
            do setInt(intDivision);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
