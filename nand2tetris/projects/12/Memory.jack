// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList;
    static int freeListLastLink;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let freeList[0] = 0;
        let freeListLastLink = 0;
        let freeList[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, freeListPointer, freeListAmount, nextLinkedList;
        var boolean allocated;
        let allocated = false;
        let freeListPointer = freeList;
        let freeListAmount = freeList[1];
        while(~(freeListPointer = 0)) {
            if(freeListPointer[1] > (size + 1)) {
                let nextLinkedList = freeListPointer[0];
                let freeListPointer[0] = 0;
                let freeListPointer[1] = size;
                let block = freeListPointer + 2;
                let freeList = freeList + size + 2;
                let freeList[0] = nextLinkedList;
                let freeList[1] = freeListAmount - size - 2;
                let freeListPointer = 0;
                let allocated = true;
            } else {
                let freeListPointer = freeList[0];
            }
        }

        if(allocated) {
            return block;
        } else {
            return -1;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        if(freeListLastLink = 0) {
            let freeListLastLink = o;
            let freeList[0] = o - 2;
        } else {
            let ram[freeListLastLink - 2] = o - 2;
            let freeListLastLink = o;
        }
        return;
    }    
}
