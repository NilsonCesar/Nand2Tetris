// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Register
    Mux(a=true, b=instruction[5], sel=instruction[15], out=writeA);

    Mux16(a=instruction, b=outAlu, sel=instruction[15], out=muxA);
    ARegister(in=muxA, load=writeA, out=aReg, out[0..14]=addressM);

    // A or M
    Mux16(a=aReg, b=inM, sel=instruction[12], out=y);

    // Write M
    And(a=instruction[15], b=instruction[3], out=writeM);

    // D Register
    Mux(a=false, b=instruction[4], sel=instruction[15], out=writeD);
    DRegister(in=outAlu, load=writeD, out=dReg, out=x);

    // ALU
    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outAlu, out=outM, zr=outZr, ng=outNg);

    // Check jump
    Or(a=outZr, b=outNg, out=notJgt);
    Not(in=notJgt, out=Jgt);

    Not(in=outNg, out=Jge);

    Not(in=outZr, out=Jne);

    Not(in=Jgt, out=Jle);

    Mux8Way16(a=false, b[0]=Jgt, b[1..15]=false, c[0]=outZr, c[1..15]=false, d[0]=Jge, d[1..15]=false, e[0]=outNg, e[1..15]=false, f[0]=Jne, f[1..15]=false, g[0]=Jle, g[1..15]=false, h=true, sel=instruction[0..2], out[0]=jumpTmp);

    And(a=instruction[15], b=jumpTmp, out=jump);

    // PC
    PC(in=aReg, reset=reset, load=jump, inc=true, out[0..14]=pc);
}