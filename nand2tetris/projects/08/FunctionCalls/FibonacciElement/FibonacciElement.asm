@Sys.init
0;JMP
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
@i
M=D
@19
D;JEQ
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@i
MD=M-1
@6
0;JMP
// push argument 0
@ARG
D=M
@addr
M=D
@0
D=A
@i
M=D
D=M
@39
D;JEQ
@addr
M=M+1
@i
M=M-1
D=M
@39
D;JEQ
@30
0;JMP
@addr
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@65
D;JLT
D=0
@66
0;JMP
D=-1
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
@ARG
D=M
@addr
M=D
@0
D=A
@i
M=D
D=M
@98
D;JEQ
@addr
M=M+1
@i
M=M-1
D=M
@98
D;JEQ
@89
0;JMP
@addr
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
AM=M-1
D=M
@THAT
M=D
@LCL
AM=M-1
D=M
@THIS
M=D
@LCL
AM=M-1
D=M
@ARG
M=D
@LCL
AM=M-1
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
@ARG
D=M
@addr
M=D
@0
D=A
@i
M=D
D=M
@167
D;JEQ
@addr
M=M+1
@i
M=M-1
D=M
@167
D;JEQ
@158
0;JMP
@addr
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@239
D=A
@Main.fibonacci$ret.1
M=D
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
// push argument 0
@ARG
D=M
@addr
M=D
@0
D=A
@i
M=D
D=M
@259
D;JEQ
@addr
M=M+1
@i
M=M-1
D=M
@259
D;JEQ
@250
0;JMP
@addr
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@331
D=A
@Main.fibonacci$ret.2
M=D
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
// add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M+D
@SP
M=M+1
// return
@LCL
D=M
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
AM=M-1
D=M
@THAT
M=D
@LCL
AM=M-1
D=M
@THIS
M=D
@LCL
AM=M-1
D=M
@ARG
M=D
@LCL
AM=M-1
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Sys.init 0
(Sys.init)
@0
D=A
@i
M=D
@397
D;JEQ
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@i
MD=M-1
@384
0;JMP
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@453
D=A
@Sys.init$ret.1
M=D
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Sys.init$ret.1)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
0;JMP
